2020-04-08 18:37:08.253704+0530 Tracker[7289:2091849] Metal API Validation Enabled
no of state 32
["Kancheepuram", "Chennai", "Erode", "Coimbatore", "Tirunelveli", "Tiruppur", "Madurai", "Salem", "Vellore", "Tiruchirappalli", "Chengalpattu", "Thanjavur", "Virudhunagar", "Karur", "Tiruvannamalai", "Viluppuram", "Namakkal", "Kanniyakumari", "Thoothukkudi", "Theni", "Dindigul", "Sivaganga", "Tirupathur", "Thiruvarur", "Ranipet", "Ramanathapuram", "Thiruvallur", "Nagapattinam", "Cuddalore", "Kallakurichi", "Perambalur", "The Nilgiris", "Ariyalur", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"]
hiii ["Kancheepuram", "Chennai", "Erode", "Coimbatore", "Tirunelveli", "Tiruppur", "Madurai", "Salem", "Vellore", "Tiruchirappalli", "Chengalpattu", "Thanjavur", "Virudhunagar", "Karur", "Tiruvannamalai", "Viluppuram", "Namakkal", "Kanniyakumari", "Thoothukkudi", "Theni", "Dindigul", "Sivaganga", "Tirupathur", "Thiruvarur", "Ranipet", "Ramanathapuram", "Thiruvallur", "Nagapattinam", "Cuddalore", "Kallakurichi", "Perambalur", "The Nilgiris", "Ariyalur", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"]
12.818456 79.6946586
12.818456 79.6946586
12.818456 79.6946586
12.818456 79.6946586
12.818456 79.6946586
12.818456 79.6946586
12.818456 79.6946586
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
13.0826802 80.2707184
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.3410364 77.7171642
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
11.0168445 76.9558321
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
8.713912600000002 77.7566523
11.1085242 77.3410656
11.1085242 77.3410656
11.1085242 77.3410656
11.1085242 77.3410656
11.1085242 77.3410656
11.1085242 77.3410656
11.1085242 77.3410656
11.1085242 77.3410656
11.1085242 77.3410656
11.1085242 77.3410656
11.1085242 77.3410656
11.1085242 77.3410656
11.1085242 77.3410656
11.1085242 77.3410656
11.1085242 77.3410656
11.1085242 77.3410656
11.1085242 77.3410656
11.1085242 77.3410656
11.1085242 77.3410656
11.1085242 77.3410656
11.1085242 77.3410656
11.1085242 77.3410656
9.9252007 78.1197754
9.9252007 78.1197754
9.9252007 78.1197754
9.9252007 78.1197754
9.9252007 78.1197754
9.9252007 78.1197754
9.9252007 78.1197754
9.9252007 78.1197754
9.9252007 78.1197754
9.9252007 78.1197754
9.9252007 78.1197754
9.9252007 78.1197754
9.9252007 78.1197754
9.9252007 78.1197754
9.9252007 78.1197754
9.9252007 78.1197754
9.9252007 78.1197754
9.9252007 78.1197754
9.9252007 78.1197754
9.9252007 78.1197754
9.9252007 78.1197754
9.9252007 78.1197754
9.9252007 78.1197754
9.9252007 78.1197754
42.51954 -70.8967155
42.51954 -70.8967155
42.51954 -70.8967155
42.51954 -70.8967155
42.51954 -70.8967155
42.51954 -70.8967155
42.51954 -70.8967155
42.51954 -70.8967155
42.51954 -70.8967155
42.51954 -70.8967155
42.51954 -70.8967155
42.51954 -70.8967155
42.51954 -70.8967155
12.9165167 79.13249859999999
12.9165167 79.13249859999999
12.9165167 79.13249859999999
12.9165167 79.13249859999999
12.9165167 79.13249859999999
12.9165167 79.13249859999999
12.9165167 79.13249859999999
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
10.7904833 78.7046725
12.6819372 79.98884129999999
12.6819372 79.98884129999999
12.6819372 79.98884129999999
12.6819372 79.98884129999999
12.6819372 79.98884129999999
12.6819372 79.98884129999999
12.6819372 79.98884129999999
12.6819372 79.98884129999999
12.6819372 79.98884129999999
12.6819372 79.98884129999999
12.6819372 79.98884129999999
12.6819372 79.98884129999999
12.6819372 79.98884129999999
12.6819372 79.98884129999999
12.6819372 79.98884129999999
12.6819372 79.98884129999999
12.6819372 79.98884129999999
12.6819372 79.98884129999999
12.6819372 79.98884129999999
12.6819372 79.98884129999999
10.7869994 79.13782739999999
10.7869994 79.13782739999999
10.7869994 79.13782739999999
10.7869994 79.13782739999999
10.7869994 79.13782739999999
10.7869994 79.13782739999999
10.7869994 79.13782739999999
10.7869994 79.13782739999999
10.7869994 79.13782739999999
10.7869994 79.13782739999999
10.7869994 79.13782739999999
9.5680116 77.96244349999999
9.5680116 77.96244349999999
9.5680116 77.96244349999999
9.5680116 77.96244349999999
9.5680116 77.96244349999999
9.5680116 77.96244349999999
9.5680116 77.96244349999999
9.5680116 77.96244349999999
9.5680116 77.96244349999999
9.5680116 77.96244349999999
9.5680116 77.96244349999999
10.9600778 78.07660360000001
10.9600778 78.07660360000001
10.9600778 78.07660360000001
10.9600778 78.07660360000001
10.9600778 78.07660360000001
10.9600778 78.07660360000001
10.9600778 78.07660360000001
10.9600778 78.07660360000001
10.9600778 78.07660360000001
10.9600778 78.07660360000001
10.9600778 78.07660360000001
10.9600778 78.07660360000001
10.9600778 78.07660360000001
10.9600778 78.07660360000001
10.9600778 78.07660360000001
10.9600778 78.07660360000001
10.9600778 78.07660360000001
10.9600778 78.07660360000001
10.9600778 78.07660360000001
10.9600778 78.07660360000001
10.9600778 78.07660360000001
10.9600778 78.07660360000001
12.2252841 79.07469569999999
12.2252841 79.07469569999999
12.2252841 79.07469569999999
12.2252841 79.07469569999999
12.2252841 79.07469569999999
11.9401378 79.4861449
11.9401378 79.4861449
11.9401378 79.4861449
11.9401378 79.4861449
11.9401378 79.4861449
11.9401378 79.4861449
11.9401378 79.4861449
11.9401378 79.4861449
11.9401378 79.4861449
11.9401378 79.4861449
11.9401378 79.4861449
11.9401378 79.4861449
11.9401378 79.4861449
11.9401378 79.4861449
11.9401378 79.4861449
11.9401378 79.4861449
11.9401378 79.4861449
11.9401378 79.4861449
11.9401378 79.4861449
11.9401378 79.4861449
11.9401378 79.4861449
11.9401378 79.4861449
11.9401378 79.4861449
11.9401378 79.4861449
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
11.2188958 78.1673575
8.0883064 77.5384507
8.0883064 77.5384507
8.0883064 77.5384507
8.0883064 77.5384507
8.0883064 77.5384507
8.0883064 77.5384507
8.764166099999999 78.1348361
8.764166099999999 78.1348361
8.764166099999999 78.1348361
8.764166099999999 78.1348361
8.764166099999999 78.1348361
8.764166099999999 78.1348361
8.764166099999999 78.1348361
8.764166099999999 78.1348361
8.764166099999999 78.1348361
8.764166099999999 78.1348361
8.764166099999999 78.1348361
8.764166099999999 78.1348361
8.764166099999999 78.1348361
8.764166099999999 78.1348361
8.764166099999999 78.1348361
8.764166099999999 78.1348361
8.764166099999999 78.1348361
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.0103658 77.4768115
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
10.3623794 77.9694579
9.8432999 78.48087749999999
9.8432999 78.48087749999999
9.8432999 78.48087749999999
9.8432999 78.48087749999999
9.8432999 78.48087749999999
10.588265 79.57298689999999
10.588265 79.57298689999999
10.588265 79.57298689999999
10.588265 79.57298689999999
10.588265 79.57298689999999
10.588265 79.57298689999999
10.588265 79.57298689999999
10.588265 79.57298689999999
10.588265 79.57298689999999
10.588265 79.57298689999999
10.588265 79.57298689999999
10.7661312 79.6343691
10.7661312 79.6343691
10.7661312 79.6343691
10.7661312 79.6343691
10.7661312 79.6343691
10.7661312 79.6343691
10.7661312 79.6343691
10.7661312 79.6343691
10.7661312 79.6343691
10.7661312 79.6343691
10.7661312 79.6343691
10.7661312 79.6343691
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
12.9487403 79.318978
9.3639356 78.8394819
9.3639356 78.8394819
13.2544335 80.0087746
13.2544335 80.0087746
13.2544335 80.0087746
13.2544335 80.0087746
13.2544335 80.0087746
13.2544335 80.0087746
13.2544335 80.0087746
13.2544335 80.0087746
13.2544335 80.0087746
13.2544335 80.0087746
13.2544335 80.0087746
13.2544335 80.0087746
13.2544335 80.0087746
10.7672313 79.8448512
10.7672313 79.8448512
10.7672313 79.8448512
10.7672313 79.8448512
10.7672313 79.8448512
10.7672313 79.8448512
10.7672313 79.8448512
10.7672313 79.8448512
10.7672313 79.8448512
10.7672313 79.8448512
10.7672313 79.8448512
11.7480419 79.7713687
11.7480419 79.7713687
11.7480419 79.7713687
11.7480419 79.7713687
11.7480419 79.7713687
11.7480419 79.7713687
11.7480419 79.7713687
11.7480419 79.7713687
11.7480419 79.7713687
11.7480419 79.7713687
11.7480419 79.7713687
11.7480419 79.7713687
11.7480419 79.7713687
11.7383735 78.9638899
11.7383735 78.9638899
11.2342104 78.8806852
11.4916043 76.7336521
11.4916043 76.7336521
11.4916043 76.7336521
11.4916043 76.7336521
11.1400585 79.0786281

marker 738
738





2020-04-08 21:52:15.201964+0530 Tracker[7590:2179438] Metal API Validation Enabled
no of state 32
1d district count 0
2d district count 70
1d []
Delhi
Telangana
Rajasthan
Haryana
Uttar+Pradesh
Ladakh
Tamil+Nadu
Jammu+and+Kashmir
Karnataka
Maharashtra
Punjab
Andhra+Pradesh
Uttarakhand
Odisha
Puducherry
West+Bengal
Chandigarh
Chhattisgarh
Gujarat
Himachal+Pradesh
Madhya+Pradesh
Bihar
Manipur
Mizoram
Goa
Andaman+and+Nicobar+Islands
Jharkhand
Assam
Arunachal+Pradesh
Dadra+and+Nagar+Haveli
Tripura
yes ["Kerala", "Delhi", "Telangana", "Rajasthan", "Haryana", "Uttar Pradesh", "Ladakh", "Tamil Nadu", "Jammu and Kashmir", "Karnataka", "Maharashtra", "Punjab", "Andhra Pradesh", "Uttarakhand", "Odisha", "Puducherry", "West Bengal", "Chandigarh", "Chhattisgarh", "Gujarat", "Himachal Pradesh", "Madhya Pradesh", "Bihar", "Manipur", "Mizoram", "Goa", "Andaman and Nicobar Islands", "Jharkhand", "Assam", "Arunachal Pradesh", "Dadra and Nagar Haveli", "Tripura"]
ooo [77.10249019999999, 79.01929969999999, 74.21793260000001, 76.085601, 80.9461592, 77.9370979, 78.6568942, 76.57617139999999, 75.7138884, 75.7138884, 75.34121789999999, 79.7399875, 79.01929969999999, 85.0985236, 79.8082865, 87.8549755, 76.7794179, 81.8661442, 71.1923805, 77.17339009999999, 78.6568942, 85.31311939999999, 93.90626879999999, 92.9375739, 74.12399599999999, 92.6586401, 85.2799354, 92.9375739, 94.7277528, 73.0169135, 91.9881527]
Fatal error: Index out of range: file /AppleInternal/BuildRoot/Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-1103.2.25.8/swift/stdlib/public/core/ContiguousArrayBuffer.swift, line 444
2020-04-08 21:52:24.289410+0530 Tracker[7590:2179438] Fatal error: Index out of range: file /AppleInternal/BuildRoot/Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-1103.2.25.8/swift/stdlib/public/core/ContiguousArrayBuffer.swift, line 444
(lldb) 





------

2020-04-09 02:03:06.856373+0530 Tracker[7989:2277687] Metal API Validation Enabled
2d district count 70
all dist count [[13, 5, 157, 16, 58, 24, 3, 13, 10, 16, 12, 7, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 3, 2, 3, 5, 26, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [104, 4, 3, 3, 4, 2, 2, 2, 4, 18, 2, 1, 1, 17, 6, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 129, 24, 27, 31, 2, 1, 2, 5, 11, 5, 36, 5, 20, 1, 4, 8, 20, 6, 10, 2, 1, 14, 15, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [14, 32, 28, 4, 2, 2, 28, 3, 3, 1, 1, 38, 5, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [64, 27, 29, 58, 4, 1, 9, 8, 2, 4, 3, 17, 35, 6, 8, 8, 1, 1, 7, 4, 14, 3, 3, 5, 2, 6, 4, 2, 2, 1, 1, 2, 1, 2, 1, 1, 10, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [11, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 159, 27, 64, 42, 22, 24, 13, 7, 37, 20, 11, 11, 22, 5, 24, 33, 6, 17, 40, 46, 5, 11, 12, 26, 2, 13, 11, 13, 2, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [19, 17, 9, 3, 2, 1, 2, 3, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [59, 9, 1, 11, 35, 1, 10, 10, 4, 1, 2, 2, 6, 10, 5, 7, 3, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [159, 702, 20, 87, 26, 4, 13, 3, 26, 6, 1, 1, 2, 2, 2, 7, 2, 3, 1, 1, 1, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [10, 19, 30, 7, 8, 6, 1, 3, 5, 7, 2, 1, 2, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [49, 27, 20, 11, 35, 20, 49, 74, 13, 22, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [14, 2, 3, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [34, 3, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [11, 4, 5, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [11, 23, 83, 18, 13, 2, 2, 18, 3, 2, 1, 5, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 85, 151, 13, 6, 2, 2, 12, 4, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 5, 10, 2, 1, 3, 5, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 5, 8, 3, 3, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
(lldb) 








            var tnlen = 0
            for i in 0...distcount[tn_num].count - 10 {
                if(distcount[tn_num][i] != 0) {
                    tnlen = tnlen + 1
                }
            }
            print("tnlen",tnlen)
            print(distcount[tn_num])
            var dist_counter = 0
            var tottt = 0
            while dist_counter<tnlen {
                
                let case_count = distcount[tn_num][dist_counter]
                var temp = 0
                while temp<case_count {
                    putMarker(lat: latarr[dist_counter], long: lngarr[dist_counter], District_Name: distlist[tn_num][dist_counter], State_Name: "Tamil Nadu")
                    temp = temp+1
                    tottt = tottt+1
                }
                dist_counter = dist_counter + 1
            }






            var distcounter = 0
            var tempp = 0
            while distlist[state_num][tempp] != "-" {
            	if distlist[state_num][tempp] == "" {
                	distlist[state_num][tempp] = "-"
            	}
                distcounter = distcounter + 1
                tempp = tempp + 1
                }

            let counti = distcounter  // takes input from list of districts and then gets lat,long values from api
            var case_tn_countt_temp = 0
            var i = 0
            var area_to_search = String()
            while(i<counti){
            	area_to_search = distlist[tn_num][i]
                area_to_search = area_to_search.replacingOccurrences(of: " ", with: "+")
                let stateNameEdit = StateSelected.replacingOccurrences(of: " ", with: "+")
                area_to_search = area_to_search+",+"+"/(stateNameEdit)"
                guard let googleurl = NSURL(string: "https://maps.googleapis.com/maps/api/geocode/json?address=\(area_to_search)&key=AIzaSyB47qXTeoW5NXYRFMRp_B6r3DG7q6VEN84") else { print(area_to_search);return }
                           do {
                               let data = try Data(contentsOf: googleurl as URL)
                               //print(data)
                               let json = try JSONSerialization.jsonObject(with: data, options: .mutableContainers)
                               guard let arraygoogle = json as? [String:Any] else { print("2");return }
                               //print(array["raw_data"]!)
                               guard let arrgoogle = arraygoogle["results"] as? [Any] else { print("3");return }
                               for result in arrgoogle {
                                    guard let loctest = result as?  [String:Any] else { print("f") ; return }
                                    guard let geometry = loctest["geometry"] as? [String:Any] else {  print("g"); return }
                                    guard let location = geometry["location"] as? [String:Any] else {  print("h"); return }
                                    guard let latt = location["lat"] as? Double else {  print("i"); return }
                                    guard let longg = location["lng"] as? Double else { print("j"); return }
                                    //print(i)
                                    //print(latt)
                                    if(i < counti) {
                                        latarr.append(latt)
                                        lngarr.append(longg)
                                    }
                                    else {
                                        print(area_to_search)
                                        statelatarr.append(latt)
                                        statelngarr.append(longg)
                                    }
                                    case_tn_countt_temp = case_tn_countt_temp + 1
                                    }
                            }
                    i=i+1
            }




            2020-04-10 20:59:13.590579+0530 Tracker[10987:2987377] Metal API Validation Enabled
Kerala
Delhi
Telangana
Rajasthan
Haryana
Uttar+Pradesh
Ladakh
Tamil+Nadu
Jammu+and+Kashmir
Karnataka
Maharashtra
Punjab
Andhra+Pradesh
Uttarakhand
Uttarakhand
Odisha
Puducherry
West+Bengal
Chandigarh
Chhattisgarh
Gujarat
Himachal+Pradesh
Madhya+Pradesh
Bihar
Manipur
Mizoram
Goa
Goa
Andaman+and+Nicobar+Islands
Jharkhand
Assam
Arunachal+Pradesh
Dadra+and+Nagar+Haveli
Tripura
yes ["Kerala", "Delhi", "Telangana", "Rajasthan", "Haryana", "Uttar Pradesh", "Ladakh", "Tamil Nadu", "Jammu and Kashmir", "Karnataka", "Maharashtra", "Punjab", "Andhra Pradesh", "Uttarakhand", "Odisha", "Puducherry", "West Bengal", "Chandigarh", "Chhattisgarh", "Gujarat", "Himachal Pradesh", "Madhya Pradesh", "Bihar", "Manipur", "Mizoram", "Goa", "Andaman and Nicobar Islands", "Jharkhand", "Assam", "Arunachal Pradesh", "Dadra and Nagar Haveli", "Tripura"]



["Kerala", "Delhi", "Telangana", "Rajasthan", "Haryana", "Uttar Pradesh", "Ladakh", "Tamil Nadu", "Jammu and Kashmir", "Karnataka", "Maharashtra", "Punjab", "Andhra Pradesh", "Uttarakhand", "Odisha", "Puducherry", "West Bengal", "Chandigarh", "Chhattisgarh", "Gujarat", "Himachal Pradesh", "Madhya Pradesh", "Bihar", "Manipur", "Mizoram", "Goa", "Andaman and Nicobar Islands", "Jharkhand", "Assam", "Arunachal Pradesh", "Dadra and Nagar Haveli", "Tripura"]




["KL", "DL", "TG", "RJ", "HR", "UP", "LA", "TN", "JK", "KA", "MH", "PB", "AP", "UT", "OR", "PY", "WB", "CH", "CT", "GJ", "HP", "MP", "BR", "MN", "MZ", "GA", "AN", "JH", "AS", "AR", "DN", "TR"]






no of state ["Kerala", "Delhi", "Telangana", "Rajasthan", "Haryana", "Uttar Pradesh", "Ladakh", "Tamil Nadu", "Jammu and Kashmir", "Karnataka", "Maharashtra", "Punjab", "Andhra Pradesh", "Uttarakhand", "Odisha", "Puducherry", "West Bengal", "Chandigarh", "Chhattisgarh", "Gujarat", "Himachal Pradesh", "Madhya Pradesh", "Bihar", "Manipur", "Mizoram", "Goa", "Andaman and Nicobar Islands", "Jharkhand", "Assam", "Arunachal Pradesh", "Dadra and Nagar Haveli", "Tripura"]
["KL", "DL", "TG", "RJ", "HR", "UP", "LA", "TN", "JK", "KA", "MH", "PB", "AP", "UT", "OR", "PY", "WB", "CH", "CT", "GJ", "HP", "MP", "BR", "MN", "MZ", "GA", "AN", "JH", "AS", "AR", "DN", "TR"]


//
//  ViewController.swift
//  Amrita Events
//
//  Created by kishore saravanan on 19/12/19.
//  Copyright © 2019 kishore saravanan. All rights reserved.
//

import UIKit
import AVFoundation
import AVKit


var india_total = ""
var india_deceased = ""
var india_recovered = ""
var india_active = ""
var deceased_state_count: [Int] = []
var active_state_count: [Int] = []
var total_state_count: [Int] = []
class ViewController: UIViewController, UIScrollViewDelegate {
    
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var pageControl: UIPageControl!
    @IBOutlet weak var proceedButton: CustomButton!
    
    @IBOutlet weak var Contentframe: UIView!
    
    
    var videos: [String] = ["0","1","2"]
    var frame = CGRect(x: 0, y: 0, width: 0, height: 0)
    
    @IBAction func proceedButtonPressed(_ sender: Any) {
        
        let myController = storyboard?.instantiateViewController(identifier: "EventsViewController")
        myController?.modalPresentationStyle = .fullScreen
        self.present(myController!, animated: true, completion: nil)
        self.ShowActivitySpinner()
    }
    override func viewDidLoad() {
        super.viewDidLoad()
        
        var temp_state = 0
        while temp_state<37 {               // initalise count of cases in each state as 0
            confirmed_state_count_daily.append(0)
            recovered_state_count_daily.append(0)
            deceased_state_count_daily.append(0)
            recovered_state_count.append(0)
            deceased_state_count.append(0)
            active_state_count.append(0)
            total_state_count.append(0)
            
            temp_state = temp_state + 1
        }
        
        
        pageControl.numberOfPages = videos.count
        for index in 0..<videos.count {
            //frame.origin.x = scrollView.frame.size.width * CGFloat(index)
            frame.origin.x = Contentframe.frame.size.width * CGFloat(index)
            //frame.size = scrollView.frame.size
            frame.size = Contentframe.frame.size
            let imgView = UIImageView(frame: frame)
            imgView.image = UIImage(named: videos[index])
            imgView.contentMode = .scaleAspectFit
            self.scrollView.addSubview(imgView)
            //self.Contentframe.addSubview(imgView)

            
            ///*
            //let path = URL(fileURLWithPath: Bundle.main.path(forResource: "lala", ofType: "mov")! )
              //     let avPlayer = AVPlayer(url: path)
                //   let castedLayer = avPlayerView.layer as! AVPlayerLayer
                  // castedLayer.player = avPlayer
                   //avPlayer.play()
             let videoView = UIView(frame: frame)
             let path = URL(fileURLWithPath: Bundle.main.path(forResource: videos[0], ofType: "mov")! )
             let player = AVPlayer(url: path)
             
             let newLayer = AVPlayerLayer(player: player)
             //newLayer.frame = scrollView.bounds
             newLayer.frame = Contentframe.bounds

            newLayer.videoGravity = AVLayerVideoGravity.resizeAspect
             //self.scrollView.layer.addSublayer(newLayer)
             
             player.actionAtItemEnd = AVPlayer.ActionAtItemEnd.none
             
             NotificationCenter.default.addObserver(self, selector: #selector(ViewController.videoDidPlayToEnd(_:)), name: NSNotification.Name(rawValue: "AVPlayerItemDidPlayToEndTimeNotification"), object: player.currentItem)
             //self.scrollView.addSubview(videoView)
             self.scrollView.layer.addSublayer(newLayer)
             //self.Contentframe.layer.addSublayer(newLayer)

             player.play()
             self.scrollView.addSubview(videoView)
             //self.Contentframe.addSubview(videoView)

             //*/
            
        }
        //scrollView.contentSize = CGSize(width: scrollView.frame.size.width * CGFloat(videos.count), height: scrollView.frame.size.height)
        scrollView.contentSize = CGSize(width: Contentframe.frame.size.width * CGFloat(videos.count), height: Contentframe.frame.size.height)
        scrollView.delegate = self
        
        
        guard let url = NSURL(string: "https://api.covid19india.org/raw_data.json") else { return }
        do {
            
            let data = try Data(contentsOf: url as URL)
            let json = try JSONSerialization.jsonObject(with: data, options: .mutableContainers)
            guard let array = json as? [String:Any] else { return }
            guard let arr = array["raw_data"] as? [Any] else { return }
            for patient in arr  {
                guard let patientDict = patient as? [String : Any] else { print("f"); return }
                guard let detectedstate = patientDict["detectedstate"] as? String else { return }
                if detectedstate != "" {
                    if (sortedState.isEmpty) {
                        sortedState.append(detectedstate)
                    }
                    if (sortedState.contains(detectedstate) == false ) {
                        sortedState.append(detectedstate)
                    }
        
                }
            }
        }
        catch {
            print(error)
        }
        
        sortedState.append("Daman and Diu")
        sortedState.append("Lakshadweep")
        sortedState.append("Meghalaya")
        sortedState.append("Nagaland")
        sortedState.append("Sikkim")
        
        
    }
    
    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        var pageNumber = scrollView.contentOffset.x / scrollView.frame.size.width
        pageControl.currentPage = Int(pageNumber)
    }
    
    @objc func videoDidPlayToEnd(_ notification: Notification) {
        let player: AVPlayerItem = notification.object as! AVPlayerItem
        player.seek(to: CMTime.zero)
    }
    
}
