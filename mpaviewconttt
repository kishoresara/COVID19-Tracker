//
//  MapViewController.swift
//  Amrita Events
//
//  Created by kishore saravanan on 11/01/20.
//  Copyright Â© 2020 kishore saravanan. All rights reserved.
//

import UIKit
import MapKit
import CoreLocation
//import FittedSheets


 var arraymark: [MKAnnotation] = []
 var statelist: [String] = []
 //var districtdict = [String:Any]()
 //var distlist: [[String]] = []
 var distlist = Array(repeating: Array(repeating: "-", count: 70), count: 70)
 var latarr: [Double] = []
 var lngarr: [Double] = []
 var case_dist_count: [Int] = []
 var case_state_count: [Int] = []
 class MapViewController: UIViewController,CLLocationManagerDelegate,MKMapViewDelegate{

    
    @IBOutlet weak var Map: MKMapView!
    
    let manager = CLLocationManager()
    
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
       // let location = locations[0]
        
        /*
        let span:MKCoordinateSpan = MKCoordinateSpan.init(latitudeDelta: 0.007, longitudeDelta: 0.007)
        let mylocation:CLLocationCoordinate2D = CLLocationCoordinate2DMake(location.coordinate.latitude, location.coordinate.longitude)
        let region:MKCoordinateRegion = MKCoordinateRegion.init(center: mylocation, span: span)
        Map.setRegion(region, animated: true)
        
        Map.showsUserLocation = true
        */
    }
    
   
    
    
    override func viewDidLoad() {
        var tempcity = 0
        var tempdist = 0
        var tempstate = 0
        var count = 0
        super.viewDidLoad()
        Map.delegate = self
        let span:MKCoordinateSpan = MKCoordinateSpan.init(latitudeDelta: 0.007, longitudeDelta: 0.007)
        let location:CLLocationCoordinate2D = CLLocationCoordinate2DMake(10.902291, 76.901342)
        let region:MKCoordinateRegion = MKCoordinateRegion.init(center: location, span: span)
        Map.setRegion(region, animated: true)
        manager.delegate = self
        manager.desiredAccuracy = kCLLocationAccuracyBest
        manager.requestWhenInUseAuthorization()
        manager.startUpdatingLocation()
        Map.showsUserLocation = true
      //  guard let path = Bundle.main.path(forResource: "anokha_allevents", ofType: "json") else { return }
        guard let url = NSURL(string: "https://api.covid19india.org/raw_data.json") else { return }
        do {
            
            let data = try Data(contentsOf: url as URL)
            //print(data)
            let json = try JSONSerialization.jsonObject(with: data, options: .mutableContainers)
            //print(json)
            guard let array = json as? [String:Any] else { return }
            //print(array["raw_data"]!)
            guard let arr = array["raw_data"] as? [Any] else { return }
            //print(arr)
            
            var temp_state = 0
            //print("distlist count",distlist.count)
            while temp_state<36 {              // initalise count of cases in each state as 0
                //print(temp_state)
                case_state_count.append(0)
                temp_state = temp_state + 1
            }
            var tn_num = 0
            for patient in arr  {
                guard let patientDict = patient as? [String : Any] else { print("f"); return }
                guard let detectedcity = patientDict["detectedcity"] as? String else { return }
                guard let detecteddistrict = patientDict["detecteddistrict"] as? String else { return }
                guard let detectedstate = patientDict["detectedstate"] as? String else { return }
            
                
                if detectedstate != "" {
                    if (statelist.isEmpty) {
                        statelist.append(detectedstate)
                        }
                    else if (statelist.contains(detectedstate) == false ) {
                        statelist.append(detectedstate)
                        }
                    else if (statelist.contains(detectedstate) == true ) {
                        var state_num = 0
                        for i in statelist {
                            if i == detectedstate {
                                case_state_count[state_num] = case_state_count[state_num] + 1
                            }
                        state_num = state_num + 1
                        }
                    }
                }
                

                if detectedstate == "Tamil Nadu" {
                    
                    var Temp_num = 0
                    for i in statelist {
                        if i == detectedstate {
                            tn_num = Temp_num
                        }
                    Temp_num = Temp_num + 1
                    }
                    if (distlist[tn_num].isEmpty) {
                        distlist[tn_num].append(detecteddistrict)
                        }
                    else if (distlist[tn_num].contains(detecteddistrict) == false ) {
                        distlist[tn_num].append(detecteddistrict)
                        }
                    }
                
                
                }
            print("no of state",statelist.count)
            print(distlist[tn_num])
             /*                             //apple code
             for i in distlist {
                let geocoder = CLGeocoder()
                geocoder.geocodeAddressString(i, completionHandler: { placemarks, error in
                if (error != nil) { print(error!, i) ; return }
                if let placemark = placemarks?[0]  {
                        let lat = String(format: "%.04f", (placemark.location?.coordinate.longitude ?? 0.0)!)
                        let lon = String(format: "%.04f", (placemark.location?.coordinate.latitude ?? 0.0)!)
                        //let name = placemark.name!
                        //let country = placemark.country!
                        //let region = placemark.administrativeArea!
                        //print("\(lat),\(lon)\n\(i)")
                        latlng[i][0] = lat
                        latlng[i][1] = long
                                     
                                   }
                            })
                    }
            */
            
            var dist_no_temp = 0
            //print("distlist count",distlist.count)
            while dist_no_temp<distlist.count {              // initalise count of cases in each case as 0
                //print(dist_no_temp)
                case_dist_count.append(0)
                dist_no_temp = dist_no_temp + 1
            }
            
            for patient in arr  {
                 guard let patientDict = patient as? [String : Any] else {
                    print("f")
                    return }
                 guard let detectedcity = patientDict["detectedcity"] as? String else { return }
                 guard let detecteddistrict = patientDict["detecteddistrict"] as? String else { return }
                 guard let detectedstate = patientDict["detectedstate"] as? String else { return }
                 tempstate = 0
                 tempdist = 0
                 tempcity = 0
                if(detectedstate != "") {
                    
                    
                    
                    var dist_no = 0
                    for i in distlist[tn_num] {                         // gets count of cases in districts after all iterations
                        if i == detecteddistrict {
                            case_dist_count[dist_no] = case_dist_count[dist_no] + 1
                        }
                        dist_no = dist_no + 1
                    }
                    //apple function to geocode *NOT WORKING*
                    ///*
                    if (detectedstate == "Tamil Nadu" && detecteddistrict == "Chennai" ) {
                        /*          //apple geocoder
                        let geocoder = CLGeocoder()
                        geocoder.geocodeAddressString(detecteddistrict, completionHandler: { placemarks, error in
                            if (error != nil) {
                                //print(error!, detecteddistrict)
                                return
                                }
                            if let placemark = placemarks?[0]  {
                                let lat = String(format: "%.04f", (placemark.location?.coordinate.longitude ?? 0.0)!)
                                let lon = String(format: "%.04f", (placemark.location?.coordinate.latitude ?? 0.0)!)
                                //let name = placemark.name!
                                //let country = placemark.country!
                                //let region = placemark.administrativeArea!
                                //print("\(lat),\(lon)\n\(detecteddistrict)")
                                
                            }
                          })
                        */
                        }
                        
                        
                    //code for converting area to co-ord using google api
                    
                    if (detectedcity != "" ) {
                        tempcity = 1
                    }
                    else{
                        //print("no city!")
                    }
                    if (detecteddistrict.isEmpty == false) {
                        tempdist = 1
                    }
                    else{
                        //print("nodist")
                    }
                    var area_to_search = "lol"
                    if(tempdist == 1 && tempcity == 0) {
                        area_to_search = (detecteddistrict+"+"+detectedstate as String?)!
                    }
                    else if (tempdist == 1 && tempcity == 1) {
                        area_to_search = ((detecteddistrict+"+"+detectedcity+"+"+detectedstate) as String?)!
                    }
                    else if (tempdist == 0 && tempcity == 1) {
                        area_to_search = (detectedcity+"+"+detectedstate as String?)!
                    }
                    else {
                        area_to_search = (detectedstate as String?)!
                    }
                
                    /*
                    //print(area_to_search)
                    guard let googleurl = NSURL(string: "https://maps.googleapis.com/maps/api/geocode/json?address=\(area_to_search)&key=AIzaSyB2b2AVwJIS47fKGkf2rvPrBcMzLWCYSC8") else { return }
                    do {
                        let data = try Data(contentsOf: googleurl as URL)
                        print(data)
                        let json = try JSONSerialization.jsonObject(with: data, options: .mutableContainers)
                        guard let arraygoogle = json as? [String:Any] else { return }
                        //print(array["raw_data"]!)
                        guard let arrgoogle = array["results"] as? [Any] else { return }
                        for result in arrgoogle {
                            guard let loctest = result as?  [String:Any] else { print("f") ; return }
                            guard let geometry = loctest["geometry"] as? [String:Any] else { return }
                            }
                    }
                    */
                }                                                                                   //end of if statement for check state
                //putMarker(lat: lat, long: long, title: title, Day1: Day1, Day2: Day2, Day3: Day3, Venue: Venue)
            }                                       // end of for loop
            print("hiii")
            //var area_to_search = "Anna Nagar"
            
            let counti = distlist.count - 2  // takes input from list of districts and then gets lat,long values from api
            var i = 0
            while(i<counti){
                var area_to_search = distlist[i]
                guard let googleurl = NSURL(string: "https://maps.googleapis.com/maps/api/geocode/json?address=\(area_to_search)&key=AIzaSyB47qXTeoW5NXYRFMRp_B6r3DG7q6VEN84") else { print(area_to_search);return }
                           do {
                               let data = try Data(contentsOf: googleurl as URL)
                               //print(data)
                               let json = try JSONSerialization.jsonObject(with: data, options: .mutableContainers)
                               guard let arraygoogle = json as? [String:Any] else { print("2");return }
                               //print(array["raw_data"]!)
                               guard let arrgoogle = arraygoogle["results"] as? [Any] else { print("3");return }
                               for result in arrgoogle {
                                    guard let loctest = result as?  [String:Any] else { print("f") ; return }
                                    guard let geometry = loctest["geometry"] as? [String:Any] else {  print("g"); return }
                                    guard let location = geometry["location"] as? [String:Any] else {  print("h"); return }
                                    guard let latt = location["lat"] as? Double else {  print("i"); return }
                                    guard let longg = location["lng"] as? Double else { print("j"); return }
                                    //print(i)
                                    //print(latt)
                                    latarr.append(latt)
                                    lngarr.append(longg)
                                    }
                            }
                    i=i+1
            }
            print(case_dist_count)
            //for i in latarr{
                //print(i)
            //}
            
            
            // putting markers for all cases in all districts
            var dist_counter = 0
            while dist_counter<(distlist.count - 2) {
                
                let case_count = case_dist_count[dist_counter]
                var temp = 0
                while temp<case_count {
                    putMarker(lat: latarr[dist_counter], long: lngarr[dist_counter], District_Name: distlist[tn_num][dist_counter], State_Name: "Tamil Nadu")
                    temp = temp+1
                }
                dist_counter = dist_counter + 1
            }
            
        }
        
            
        catch {
            print(error)
        }
        
        //Map.showAnnotations(arraymark, animated: true)
        Map.register(EventMarkerView.self, forAnnotationViewWithReuseIdentifier: MKMapViewDefaultAnnotationViewReuseIdentifier)
        Map.register(MapEventClusterView.self, forAnnotationViewWithReuseIdentifier: MKMapViewDefaultClusterAnnotationViewReuseIdentifier)
        
        
        
    }
    

    
    
    
    
    // MARK: - Navigation

    // In a storyboard-based application, you will often want to do a little preparation before navigation
    /*
    override func viewDidAppear(_ animated:Bool ) {
        guard let path = Bundle.main.path(forResource: "Events", ofType: "json") else { return }
        let url = URL(fileURLWithPath: path)
        do {
            
            let data = try Data(contentsOf: url)
            let json = try JSONSerialization.jsonObject(with: data, options: .mutableContainers)
            guard let array = json as? [Any] else { return }
            
            for user in array {
                guard let userDict = user as? [String : Any] else { return }
                guard let lat = userDict["Lat"] as? Double else { return }
                guard let long = userDict["Long"] as? Double else { return }
                guard let title = userDict["title"] as? String else { return }
                guard let startTime = userDict["Start_Time"] as? String else { return }
                guard let endTime = userDict["End_Time"] as? String else { return }
                guard let date = userDict["Date"] as? String else { return }
                
                print(lat)
                print(long)
                print(title)
                
                putMarker(lat: lat, long: long, title: title, startTime: startTime, endTime: endTime, date: date)
            
        }
        catch {
            print(error)
        }
    }
    
    */
    
    func putMarker(lat:Double, long:Double, District_Name:String, State_Name:String ) {
        
        let annotation = MKPointAnnotation()
        let location:CLLocationCoordinate2D = CLLocationCoordinate2DMake(lat, long)
        annotation.coordinate = location
        annotation.title = District_Name
        //annotation.subtitle = Day1+" - "+Day2+" - "+Day3+" in "+Venue
        annotation.subtitle = State_Name

        
        Map.addAnnotation(annotation)
        //Map!.dequeueReusableAnnotationView(withIdentifier: nil)
        
    }
    /*
    func putMarker(lat:Double, long:Double, title:String, Day1:String, Day2:String, Day3:String, Venue:String ) {
        
        let annotation = MKPointAnnotation()
        let location:CLLocationCoordinate2D = CLLocationCoordinate2DMake(lat, long)
        annotation.coordinate = location
        annotation.title = title
        //annotation.subtitle = Day1+" - "+Day2+" - "+Day3+" in "+Venue
        annotation.subtitle = Venue

        
        Map.addAnnotation(annotation)
        //Map!.dequeueReusableAnnotationView(withIdentifier: nil)
        
    }
    */
    
    func mapView(_ mapView: MKMapView, annotationView view: MKAnnotationView, calloutAccessoryControlTapped control: UIControl) {
        MapOrList = 2
        if(view.rightCalloutAccessoryView?.tintColor == UIColor.red)
        {
            print("hi")
            guard let clusterAnnotation = view.annotation as? MKClusterAnnotation else { return }
            let arrayCluster = clusterAnnotation.memberAnnotations
            arraymark = arrayCluster
            var i = Int()
            i=0
            print(arrayCluster.count)
            while(i<arrayCluster.count){
                print(arrayCluster[i].title as! String)
                i = i+1
            }
           //let controller = SheetViewController2()
            performSegue(withIdentifier: "collectionSegue", sender: view)
           // let sheetController = SheetViewController(controller: controller)
            // It is important to set animated to false or it behaves weird currently
            //self.present(controller, animated: false, completion: nil)
        }
        else
        {
        performSegue(withIdentifier: "mapSegue", sender: view)
        EventNameGlobal = view.annotation?.title as! String
        //print(view.clusteringIdentifier)
        }
       // EventNameGlobal = annotation!.title as! String
    }
    
    
     func seguebutton()
    {
        MapOrList = 2
        print(MapOrList)
        //dismiss(animated: true, completion: nil)
     //   pushViewController(_ viewController: DetailsViewController, animated: Bool)
        self.performSegue(withIdentifier: "mapSegue", sender: EventMarkerView.self)
        //let myController = storyboard?.instantiateViewController(identifier: "DetailsViewController")
        //myController?.modalPresentationStyle = .fullScreen
        //self.present(myController!, animated: true, completion: nil)
    }
    
    //override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        // Get the new view controller using segue.destination.
        // Pass the selected object to the new view controller.
      //  let destination = segue.destination as! DetailsViewController
    //}
    
    
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)

        // Hide the navigation bar on the this view controller
        self.navigationController?.setNavigationBarHidden(true, animated: animated)
    }

    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)

        // Show the navigation bar on other view controllers
        self.navigationController?.setNavigationBarHidden(false, animated: animated)
    }

   
}
